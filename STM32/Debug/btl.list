
btl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf8  08002bf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf8  08002bf8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf8  08002bf8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08002c10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002c10  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008251  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbc  00000000  00000000  000282cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000756  00000000  00000000  0002ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a131  00000000  00000000  0002b3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a24b  00000000  00000000  0004550f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093e01  00000000  00000000  0004f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028c0  00000000  00000000  000e355c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e5e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bc8 	.word	0x08002bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002bc8 	.word	0x08002bc8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4906      	ldr	r1, [pc, #24]	; (8000744 <__NVIC_EnableIRQ+0x34>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	332c      	adds	r3, #44	; 0x2c
 8000810:	4619      	mov	r1, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000818:	f44f 7240 	mov.w	r2, #768	; 0x300
 800081c:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	fa92 f2a2 	rbit	r2, r2
 8000824:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	fab2 f282 	clz	r2, r2
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	40d3      	lsrs	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	440b      	add	r3, r1
 8000834:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f003 031f 	and.w	r3, r3, #31
 8000840:	211f      	movs	r1, #31
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	401a      	ands	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f003 011f 	and.w	r1, r3, #31
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	431a      	orrs	r2, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000860:	bf00      	nop
 8000862:	3724      	adds	r7, #36	; 0x24
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800086a:	b480      	push	{r7}
 800086c:	b08d      	sub	sp, #52	; 0x34
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	330c      	adds	r3, #12
 800087a:	4619      	mov	r1, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	fa92 f2a2 	rbit	r2, r2
 800088e:	617a      	str	r2, [r7, #20]
  return result;
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	fab2 f282 	clz	r2, r2
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	40d3      	lsrs	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	440b      	add	r3, r1
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80008a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80008aa:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80008ae:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b0:	6a39      	ldr	r1, [r7, #32]
 80008b2:	fa91 f1a1 	rbit	r1, r1
 80008b6:	61f9      	str	r1, [r7, #28]
  return result;
 80008b8:	69f9      	ldr	r1, [r7, #28]
 80008ba:	fab1 f181 	clz	r1, r1
 80008be:	b2c9      	uxtb	r1, r1
 80008c0:	40cb      	lsrs	r3, r1
 80008c2:	2107      	movs	r1, #7
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80008d2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80008d6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008da:	fa91 f1a1 	rbit	r1, r1
 80008de:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80008e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008e2:	fab1 f181 	clz	r1, r1
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	40cb      	lsrs	r3, r1
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	431a      	orrs	r2, r3
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80008f6:	bf00      	nop
 80008f8:	3734      	adds	r7, #52	; 0x34
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f043 0201 	orr.w	r2, r3, #1
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	609a      	str	r2, [r3, #8]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	609a      	str	r2, [r3, #8]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	b29b      	uxth	r3, r3
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b02      	cmp	r3, #2
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60da      	str	r2, [r3, #12]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	f023 0201 	bic.w	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <LL_RCC_HSI_Enable+0x18>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <LL_RCC_HSI_Enable+0x18>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <LL_RCC_HSI_IsReady+0x20>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	bf0c      	ite	eq
 8000a24:	2301      	moveq	r3, #1
 8000a26:	2300      	movne	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4903      	ldr	r1, [pc, #12]	; (8000a5c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	600b      	str	r3, [r1, #0]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000

08000a60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <LL_RCC_SetSysClkSource+0x24>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f023 0203 	bic.w	r2, r3, #3
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <LL_RCC_SetSysClkSource+0x24>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <LL_RCC_GetSysClkSource+0x14>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 030c 	and.w	r3, r3, #12
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ad8:	4904      	ldr	r1, [pc, #16]	; (8000aec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b00:	4904      	ldr	r1, [pc, #16]	; (8000b14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	604b      	str	r3, [r1, #4]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <LL_RCC_SetADCClockSource+0x24>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000b28:	4904      	ldr	r1, [pc, #16]	; (8000b3c <LL_RCC_SetADCClockSource+0x24>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	604b      	str	r3, [r1, #4]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b4a:	69da      	ldr	r2, [r3, #28]
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b56:	69da      	ldr	r2, [r3, #28]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b7a:	699a      	ldr	r2, [r3, #24]
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LL_FLASH_SetLatency+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0207 	bic.w	r2, r3, #7
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <LL_FLASH_SetLatency+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LL_FLASH_GetLatency+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40022000 	.word	0x40022000

08000be0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	615a      	str	r2, [r3, #20]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c38:	2b80      	cmp	r3, #128	; 0x80
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	605a      	str	r2, [r3, #4]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	43da      	mvns	r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf0c      	ite	eq
 8000c84:	2301      	moveq	r3, #1
 8000c86:	2300      	movne	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	615a      	str	r2, [r3, #20]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000cda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6053      	str	r3, [r2, #4]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40010000 	.word	0x40010000

08000cf0 <UART_SendByte>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void UART_SendByte(uint8_t data) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    // Chờ cho đến khi UART sẵn sàng gửi dữ liệu
    while (!LL_USART_IsActiveFlag_TXE(huart1)) {
 8000cfa:	bf00      	nop
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <UART_SendByte+0x34>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff91 	bl	8000c28 <LL_USART_IsActiveFlag_TXE>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f7      	beq.n	8000cfc <UART_SendByte+0xc>
    }

    // Gửi một byte dữ liệu qua UART
    LL_USART_TransmitData8(huart1, data);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <UART_SendByte+0x34>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff99 	bl	8000c4c <LL_USART_TransmitData8>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000000 	.word	0x20000000

08000d28 <map>:
int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	69b9      	ldr	r1, [r7, #24]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	1a8a      	subs	r2, r1, r2
 8000d42:	fb03 f202 	mul.w	r2, r3, r2
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	4413      	add	r3, r2
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
	...

08000d60 <kalman_single>:
float kalman_single(float z, float measure_noise, float process_noise) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
    const float R = measure_noise * measure_noise;
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	68b8      	ldr	r0, [r7, #8]
 8000d70:	f7ff fafa 	bl	8000368 <__aeabi_fmul>
 8000d74:	4603      	mov	r3, r0
 8000d76:	61fb      	str	r3, [r7, #28]
    const float Q = process_noise * process_noise;
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff faf4 	bl	8000368 <__aeabi_fmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	61bb      	str	r3, [r7, #24]
    static float x_hat, P;
    float P_, K;

    /********* noi suy kalman ***************/
    P_ = P + Q;                     // P_ = A*P*A' + Q;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <kalman_single+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	69b8      	ldr	r0, [r7, #24]
 8000d8c:	f7ff f9e4 	bl	8000158 <__addsf3>
 8000d90:	4603      	mov	r3, r0
 8000d92:	617b      	str	r3, [r7, #20]
    K = P_ / (P_ + R);               // K = P_*H'*inv(H*P_*H' + R);
 8000d94:	69f9      	ldr	r1, [r7, #28]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff f9de 	bl	8000158 <__addsf3>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff fb95 	bl	80004d0 <__aeabi_fdiv>
 8000da6:	4603      	mov	r3, r0
 8000da8:	613b      	str	r3, [r7, #16]
    x_hat = x_hat + K * (z - x_hat); // x_hat = x_hat + K*(z - H*x_hat);
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <kalman_single+0xa4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f7ff f9cf 	bl	8000154 <__aeabi_fsub>
 8000db6:	4603      	mov	r3, r0
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fad4 	bl	8000368 <__aeabi_fmul>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <kalman_single+0xa4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4610      	mov	r0, r2
 8000dcc:	f7ff f9c4 	bl	8000158 <__addsf3>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <kalman_single+0xa4>)
 8000dd6:	601a      	str	r2, [r3, #0]
    P = (1 - K) * P_;                // P = (1 - K*H)*P_ ;
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000dde:	f7ff f9b9 	bl	8000154 <__aeabi_fsub>
 8000de2:	4603      	mov	r3, r0
 8000de4:	6979      	ldr	r1, [r7, #20]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fabe 	bl	8000368 <__aeabi_fmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <kalman_single+0xa0>)
 8000df2:	601a      	str	r2, [r3, #0]
    /****************************************/
    return x_hat;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <kalman_single+0xa4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000084 	.word	0x20000084
 8000e04:	20000088 	.word	0x20000088

08000e08 <main>:

int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fb87 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f8db 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 fa71 	bl	80012fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e1a:	f000 f911 	bl	8001040 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 fa15 	bl	800124c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e22:	f000 f9bd 	bl	80011a0 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000e26:	f000 f97d 	bl	8001124 <MX_ADC2_Init>
  LL_ADC_Enable(ADC1);
 8000e2a:	485c      	ldr	r0, [pc, #368]	; (8000f9c <main+0x194>)
 8000e2c:	f7ff fd68 	bl	8000900 <LL_ADC_Enable>
  LL_ADC_Enable(ADC2);
 8000e30:	485b      	ldr	r0, [pc, #364]	; (8000fa0 <main+0x198>)
 8000e32:	f7ff fd65 	bl	8000900 <LL_ADC_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8000e36:	4859      	ldr	r0, [pc, #356]	; (8000f9c <main+0x194>)
 8000e38:	f7ff fd71 	bl	800091e <LL_ADC_REG_StartConversionSWStart>

	  	  	  	      // Chờ cho đến khi hoàn thành chuyển đổi
	  	  	  	      while (!LL_ADC_IsActiveFlag_EOS(ADC1)) {
 8000e3c:	bf00      	nop
 8000e3e:	4857      	ldr	r0, [pc, #348]	; (8000f9c <main+0x194>)
 8000e40:	f7ff fd88 	bl	8000954 <LL_ADC_IsActiveFlag_EOS>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f9      	beq.n	8000e3e <main+0x36>
	  	  	  	      }

	  	  	  	      // Đọc giá trị từ thanh ghi dữ liệu của ADC
	  	  	  	       adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000e4a:	4854      	ldr	r0, [pc, #336]	; (8000f9c <main+0x194>)
 8000e4c:	f7ff fd76 	bl	800093c <LL_ADC_REG_ReadConversionData12>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <main+0x19c>)
 8000e56:	801a      	strh	r2, [r3, #0]
	  	  	  	        soil =map(adc_value, 1201, 4095, 100, 0);
 8000e58:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <main+0x19c>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e68:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000e6c:	f7ff ff5c 	bl	8000d28 <map>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fa24 	bl	80002c0 <__aeabi_i2f>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <main+0x1a0>)
 8000e7c:	6013      	str	r3, [r2, #0]


	  	  	  	       uint8_t byte1 = (adc_value >> 8) & 0xFF; // Byte cao
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <main+0x19c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	71fb      	strb	r3, [r7, #7]
	  	  	  	               uint8_t byte2 = adc_value & 0xFF;        // Byte thấp
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <main+0x19c>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	71bb      	strb	r3, [r7, #6]

	  	  	  	               // Gửi hai byte qua UART
	  	  	  	               UART_SendByte(byte1);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff2d 	bl	8000cf0 <UART_SendByte>
	  	  	  	               UART_SendByte(byte2);
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff29 	bl	8000cf0 <UART_SendByte>
	  	  	  	           LL_ADC_REG_StartConversionSWStart(ADC2);
 8000e9e:	4840      	ldr	r0, [pc, #256]	; (8000fa0 <main+0x198>)
 8000ea0:	f7ff fd3d 	bl	800091e <LL_ADC_REG_StartConversionSWStart>

	  	  	  	           	  	  	      // Chờ cho đến khi hoàn thành chuyển đổi
	  	  	  	       while (!LL_ADC_IsActiveFlag_EOS(ADC2)) {
 8000ea4:	bf00      	nop
 8000ea6:	483e      	ldr	r0, [pc, #248]	; (8000fa0 <main+0x198>)
 8000ea8:	f7ff fd54 	bl	8000954 <LL_ADC_IsActiveFlag_EOS>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <main+0x9e>
	  	  	  	           	  	  	     }

	  	  	  	           	// Đọc giá trị từ thanh ghi dữ liệu của ADC
	  	  	  	       adc0 = LL_ADC_REG_ReadConversionData12(ADC2);
 8000eb2:	483b      	ldr	r0, [pc, #236]	; (8000fa0 <main+0x198>)
 8000eb4:	f7ff fd42 	bl	800093c <LL_ADC_REG_ReadConversionData12>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <main+0x1a4>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	  	  	  	       ldr= (adc0*5)/4095;
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <main+0x1a4>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4a3a      	ldr	r2, [pc, #232]	; (8000fb0 <main+0x1a8>)
 8000ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eca:	441a      	add	r2, r3
 8000ecc:	1252      	asrs	r2, r2, #9
 8000ece:	17db      	asrs	r3, r3, #31
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f9f4 	bl	80002c0 <__aeabi_i2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <main+0x1ac>)
 8000edc:	6013      	str	r3, [r2, #0]
	  	  	  	 float fil= kalman_single(ldr, 0.5, 0.5) ;
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <main+0x1ac>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000ee6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff38 	bl	8000d60 <kalman_single>
 8000ef0:	6038      	str	r0, [r7, #0]



	  	  	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_14)){
 8000ef2:	4931      	ldr	r1, [pc, #196]	; (8000fb8 <main+0x1b0>)
 8000ef4:	4831      	ldr	r0, [pc, #196]	; (8000fbc <main+0x1b4>)
 8000ef6:	f7ff feb7 	bl	8000c68 <LL_GPIO_IsInputPinSet>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d127      	bne.n	8000f50 <main+0x148>
	  	  		if (fil<=2){LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_7);}
 8000f00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f7ff fbd7 	bl	80006b8 <__aeabi_fcmple>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <main+0x114>
 8000f10:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f14:	4829      	ldr	r0, [pc, #164]	; (8000fbc <main+0x1b4>)
 8000f16:	f7ff febd 	bl	8000c94 <LL_GPIO_SetOutputPin>
 8000f1a:	e004      	b.n	8000f26 <main+0x11e>
	  	  		else {LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);}
 8000f1c:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f20:	4826      	ldr	r0, [pc, #152]	; (8000fbc <main+0x1b4>)
 8000f22:	f7ff fec6 	bl	8000cb2 <LL_GPIO_ResetOutputPin>
	  	  		if (soil<60) {LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);}
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <main+0x1a0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4925      	ldr	r1, [pc, #148]	; (8000fc0 <main+0x1b8>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fbb9 	bl	80006a4 <__aeabi_fcmplt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <main+0x13c>
 8000f38:	f244 0140 	movw	r1, #16448	; 0x4040
 8000f3c:	481f      	ldr	r0, [pc, #124]	; (8000fbc <main+0x1b4>)
 8000f3e:	f7ff fea9 	bl	8000c94 <LL_GPIO_SetOutputPin>
 8000f42:	e778      	b.n	8000e36 <main+0x2e>
	  	  				else {LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);}
 8000f44:	f244 0140 	movw	r1, #16448	; 0x4040
 8000f48:	481c      	ldr	r0, [pc, #112]	; (8000fbc <main+0x1b4>)
 8000f4a:	f7ff feb2 	bl	8000cb2 <LL_GPIO_ResetOutputPin>
 8000f4e:	e772      	b.n	8000e36 <main+0x2e>
	  	  	}
	  	  	  		else {if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12))
 8000f50:	491c      	ldr	r1, [pc, #112]	; (8000fc4 <main+0x1bc>)
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <main+0x1b4>)
 8000f54:	f7ff fe88 	bl	8000c68 <LL_GPIO_IsInputPinSet>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <main+0x162>
	  	  	  			{LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);}
 8000f5e:	f244 0140 	movw	r1, #16448	; 0x4040
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <main+0x1b4>)
 8000f64:	f7ff fea5 	bl	8000cb2 <LL_GPIO_ResetOutputPin>
 8000f68:	e004      	b.n	8000f74 <main+0x16c>
	  	  	else {LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);}
 8000f6a:	f244 0140 	movw	r1, #16448	; 0x4040
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <main+0x1b4>)
 8000f70:	f7ff fe90 	bl	8000c94 <LL_GPIO_SetOutputPin>
	  	  	  	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_13))
 8000f74:	4914      	ldr	r1, [pc, #80]	; (8000fc8 <main+0x1c0>)
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <main+0x1b4>)
 8000f78:	f7ff fe76 	bl	8000c68 <LL_GPIO_IsInputPinSet>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <main+0x186>
	  	  	  		  	  			{LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);}
 8000f82:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <main+0x1b4>)
 8000f88:	f7ff fe93 	bl	8000cb2 <LL_GPIO_ResetOutputPin>
 8000f8c:	e753      	b.n	8000e36 <main+0x2e>
	  	  	  		  	else {LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_7);}
 8000f8e:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x1b4>)
 8000f94:	f7ff fe7e 	bl	8000c94 <LL_GPIO_SetOutputPin>
  {
 8000f98:	e74d      	b.n	8000e36 <main+0x2e>
 8000f9a:	bf00      	nop
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	40012800 	.word	0x40012800
 8000fa4:	2000002c 	.word	0x2000002c
 8000fa8:	20000034 	.word	0x20000034
 8000fac:	2000002e 	.word	0x2000002e
 8000fb0:	a00a00a1 	.word	0xa00a00a1
 8000fb4:	20000030 	.word	0x20000030
 8000fb8:	04400040 	.word	0x04400040
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	42700000 	.word	0x42700000
 8000fc4:	04100010 	.word	0x04100010
 8000fc8:	04200020 	.word	0x04200020

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fde5 	bl	8000ba0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff fdf6 	bl	8000bc8 <LL_FLASH_GetLatency>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1fa      	bne.n	8000fd8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000fe2:	2010      	movs	r0, #16
 8000fe4:	f7ff fd28 	bl	8000a38 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000fe8:	f7ff fd06 	bl	80009f8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000fec:	bf00      	nop
 8000fee:	f7ff fd11 	bl	8000a14 <LL_RCC_HSI_IsReady>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d1fa      	bne.n	8000fee <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fd51 	bl	8000aa0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fd62 	bl	8000ac8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fd73 	bl	8000af0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fd28 	bl	8000a60 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001010:	bf00      	nop
 8001012:	f7ff fd39 	bl	8000a88 <LL_RCC_GetSysClkSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fa      	bne.n	8001012 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <SystemClock_Config+0x70>)
 800101e:	f001 fda1 	bl	8002b64 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001022:	200f      	movs	r0, #15
 8001024:	f000 fa92 	bl	800154c <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800102e:	f000 f99d 	bl	800136c <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fd70 	bl	8000b18 <LL_RCC_SetADCClockSource>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	007a1200 	.word	0x007a1200

08001040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001072:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001076:	f7ff fd7b 	bl	8000b70 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800107a:	2008      	movs	r0, #8
 800107c:	f7ff fd78 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001080:	f240 3303 	movw	r3, #771	; 0x303
 8001084:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4822      	ldr	r0, [pc, #136]	; (8001118 <MX_ADC1_Init+0xd8>)
 8001090:	f001 f9d9 	bl	8002446 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001094:	f7ff fb2e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fb7c 	bl	800079c <NVIC_EncodePriority>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4619      	mov	r1, r3
 80010a8:	2012      	movs	r0, #18
 80010aa:	f7ff fb4d 	bl	8000748 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fb2e 	bl	8000710 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80010bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <MX_ADC1_Init+0xdc>)
 80010c4:	f001 f89a 	bl	80021fc <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_ADC1_Init+0xdc>)
 80010d4:	f001 f860 	bl	8002198 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80010d8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80010dc:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_ADC1_Init+0xdc>)
 80010f6:	f001 f8a8 	bl	800224a <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <MX_ADC1_Init+0xe0>)
 80010fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC1_Init+0xdc>)
 8001102:	f7ff fb7d 	bl	8000800 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001106:	2200      	movs	r2, #0
 8001108:	4905      	ldr	r1, [pc, #20]	; (8001120 <MX_ADC1_Init+0xe0>)
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_ADC1_Init+0xdc>)
 800110c:	f7ff fbad 	bl	800086a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010c00 	.word	0x40010c00
 800111c:	40012400 	.word	0x40012400
 8001120:	03b00009 	.word	0x03b00009

08001124 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_ADC2_Init+0x74>)
 8001136:	4a19      	ldr	r2, [pc, #100]	; (800119c <MX_ADC2_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_ADC2_Init+0x74>)
 8001142:	2201      	movs	r2, #1
 8001144:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x74>)
 800114e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001152:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_ADC2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x74>)
 8001162:	f000 fa3f 	bl	80015e4 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 f8fe 	bl	800136c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001170:	2308      	movs	r3, #8
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x74>)
 8001182:	f000 fc11 	bl	80019a8 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800118c:	f000 f8ee 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000038 	.word	0x20000038
 800119c:	40012800 	.word	0x40012800

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80011c6:	2008      	movs	r0, #8
 80011c8:	f7ff fcd2 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_I2C1_Init+0x9c>)
 80011ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011d0:	2309      	movs	r3, #9
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80011d8:	2304      	movs	r3, #4
 80011da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4817      	ldr	r0, [pc, #92]	; (8001240 <MX_I2C1_Init+0xa0>)
 80011e2:	f001 f930 	bl	8002446 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 80011e6:	f7ff fd73 	bl	8000cd0 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80011ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011ee:	f7ff fca7 	bl	8000b40 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MX_I2C1_Init+0xa4>)
 80011f4:	f7ff fbf0 	bl	80009d8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <MX_I2C1_Init+0xa4>)
 80011fa:	f7ff fbcc 	bl	8000996 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_I2C1_Init+0xa4>)
 8001200:	f7ff fbba 	bl	8000978 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0xa8>)
 800120a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800121a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_I2C1_Init+0xa4>)
 8001228:	f001 fa62 	bl	80026f0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_I2C1_Init+0xa4>)
 8001230:	f7ff fbc0 	bl	80009b4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	04030003 	.word	0x04030003
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40005400 	.word	0x40005400
 8001248:	000186a0 	.word	0x000186a0

0800124c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001274:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001278:	f7ff fc7a 	bl	8000b70 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800127c:	2004      	movs	r0, #4
 800127e:	f7ff fc77 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_USART1_UART_Init+0xa0>)
 8001284:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001286:	2309      	movs	r3, #9
 8001288:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <MX_USART1_UART_Init+0xa4>)
 8001298:	f001 f8d5 	bl	8002446 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_USART1_UART_Init+0xa8>)
 800129e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80012a0:	2304      	movs	r3, #4
 80012a2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0xa4>)
 80012aa:	f001 f8cc 	bl	8002446 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80012ae:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012b2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012c0:	230c      	movs	r3, #12
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MX_USART1_UART_Init+0xac>)
 80012d4:	f001 fbe6 	bl	8002aa4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_USART1_UART_Init+0xac>)
 80012da:	f7ff fc90 	bl	8000bfe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_USART1_UART_Init+0xac>)
 80012e0:	f7ff fc7e 	bl	8000be0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	04020002 	.word	0x04020002
 80012f0:	40010800 	.word	0x40010800
 80012f4:	04040004 	.word	0x04040004
 80012f8:	40013800 	.word	0x40013800

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001310:	2020      	movs	r0, #32
 8001312:	f7ff fc2d 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001316:	2008      	movs	r0, #8
 8001318:	f7ff fc2a 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800131c:	2004      	movs	r0, #4
 800131e:	f7ff fc27 	bl	8000b70 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 8001322:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_GPIO_Init+0x68>)
 8001328:	f7ff fcc3 	bl	8000cb2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_GPIO_Init+0x6c>)
 800132e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001330:	2304      	movs	r3, #4
 8001332:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <MX_GPIO_Init+0x68>)
 800133a:	f001 f884 	bl	8002446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800133e:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001344:	2301      	movs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001348:	2302      	movs	r3, #2
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <MX_GPIO_Init+0x68>)
 8001356:	f001 f876 	bl	8002446 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40010c00 	.word	0x40010c00
 8001368:	04700070 	.word	0x04700070

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_ADC_MspInit+0x7c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d129      	bne.n	8001450 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_ADC_MspInit+0x80>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_ADC_MspInit+0x80>)
 8001402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_MspInit+0x80>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_MspInit+0x80>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_ADC_MspInit+0x80>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_ADC_MspInit+0x80>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PB0     ------> ADC2_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001430:	2303      	movs	r3, #3
 8001432:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_ADC_MspInit+0x84>)
 800143c:	f000 fd04 	bl	8001e48 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2012      	movs	r0, #18
 8001446:	f000 fcc8 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800144a:	2012      	movs	r0, #18
 800144c:	f000 fce1 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40012800 	.word	0x40012800
 800145c:	40021000 	.word	0x40021000
 8001460:	40010c00 	.word	0x40010c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014aa:	f000 f87f 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <ADC1_2_IRQHandler+0x10>)
 80014ba:	f000 f98f 	bl	80017dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000038 	.word	0x20000038

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff fff8 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014da:	490c      	ldr	r1, [pc, #48]	; (800150c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014dc:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f0:	4c09      	ldr	r4, [pc, #36]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f001 fb3f 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fc81 	bl	8000e08 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001510:	08002c00 	.word	0x08002c00
  ldr r2, =_sbss
 8001514:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001518:	20000090 	.word	0x20000090

0800151c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <CAN1_RX1_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 fc47 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff ff1c 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fc5f 	bl	8001e2e <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 fc27 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000004 	.word	0x20000004
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	2000000c 	.word	0x2000000c
 80015cc:	2000008c 	.word	0x2000008c

080015d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	2000008c 	.word	0x2000008c

080015e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0d5      	b.n	80017b2 <HAL_ADC_Init+0x1ce>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	2b00      	cmp	r3, #0
 8001612:	d120      	bne.n	8001656 <HAL_ADC_Init+0x72>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_ADC_Init+0x1d8>)
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_ADC_Init+0x1dc>)
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a64      	ldr	r2, [pc, #400]	; (80017c4 <HAL_ADC_Init+0x1e0>)
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <HAL_ADC_Init+0x1e4>)
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <HAL_ADC_Init+0x1e8>)
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (hadc->MspInitCallback == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <HAL_ADC_Init+0x1ec>)
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fa9e 	bl	8001b98 <ADC_ConversionStop_Disable>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 8099 	bne.w	80017a0 <HAL_ADC_Init+0x1bc>
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 8095 	bne.w	80017a0 <HAL_ADC_Init+0x1bc>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800167e:	f023 0302 	bic.w	r3, r3, #2
 8001682:	f043 0202 	orr.w	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001692:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800169a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016aa:	d003      	beq.n	80016b4 <HAL_ADC_Init+0xd0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_ADC_Init+0xd6>
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	e000      	b.n	80016bc <HAL_ADC_Init+0xd8>
 80016ba:	2300      	movs	r3, #0
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7d1b      	ldrb	r3, [r3, #20]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d119      	bne.n	80016fe <HAL_ADC_Init+0x11a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b1b      	ldrb	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_ADC_Init+0x102>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	035a      	lsls	r2, r3, #13
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e00b      	b.n	80016fe <HAL_ADC_Init+0x11a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f043 0220 	orr.w	r2, r3, #32
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_ADC_Init+0x1f0>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	430b      	orrs	r3, r1
 8001724:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172e:	d003      	beq.n	8001738 <HAL_ADC_Init+0x154>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d104      	bne.n	8001742 <HAL_ADC_Init+0x15e>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	3b01      	subs	r3, #1
 800173e:	051b      	lsls	r3, r3, #20
 8001740:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_ADC_Init+0x1f4>)
 800175e:	4013      	ands	r3, r2
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d10b      	bne.n	800177e <HAL_ADC_Init+0x19a>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f023 0303 	bic.w	r3, r3, #3
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177c:	e018      	b.n	80017b0 <HAL_ADC_Init+0x1cc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f023 0312 	bic.w	r3, r3, #18
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800179e:	e007      	b.n	80017b0 <HAL_ADC_Init+0x1cc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08001961 	.word	0x08001961
 80017c0:	08001973 	.word	0x08001973
 80017c4:	08001985 	.word	0x08001985
 80017c8:	08001997 	.word	0x08001997
 80017cc:	08001c1b 	.word	0x08001c1b
 80017d0:	080013dd 	.word	0x080013dd
 80017d4:	ffe1f7fd 	.word	0xffe1f7fd
 80017d8:	ff1f0efe 	.word	0xff1f0efe

080017dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03f      	beq.n	800187e <HAL_ADC_IRQHandler+0xa2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03a      	beq.n	800187e <HAL_ADC_IRQHandler+0xa2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800182a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800182e:	d11d      	bne.n	800186c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001834:	2b00      	cmp	r3, #0
 8001836:	d119      	bne.n	800186c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0220 	bic.w	r2, r2, #32
 8001846:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
#else
      HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0212 	mvn.w	r2, #18
 800187c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001884:	2b00      	cmp	r3, #0
 8001886:	d04e      	beq.n	8001926 <HAL_ADC_IRQHandler+0x14a>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d049      	beq.n	8001926 <HAL_ADC_IRQHandler+0x14a>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_IRQHandler+0xce>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80018b4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80018b8:	d012      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x104>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d125      	bne.n	8001914 <HAL_ADC_IRQHandler+0x138>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018d6:	d11d      	bne.n	8001914 <HAL_ADC_IRQHandler+0x138>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d119      	bne.n	8001914 <HAL_ADC_IRQHandler+0x138>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_IRQHandler+0x138>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 020c 	mvn.w	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f06f 0201 	mvn.w	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x20>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e0dc      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1da>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d81c      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b05      	subs	r3, #5
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b05      	subs	r3, #5
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a10:	e03c      	b.n	8001a8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d81c      	bhi.n	8001a54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b23      	subs	r3, #35	; 0x23
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4019      	ands	r1, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b23      	subs	r3, #35	; 0x23
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
 8001a52:	e01b      	b.n	8001a8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	3b41      	subs	r3, #65	; 0x41
 8001a66:	221f      	movs	r2, #31
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4019      	ands	r1, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b41      	subs	r3, #65	; 0x41
 8001a80:	fa00 f203 	lsl.w	r2, r0, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	d91c      	bls.n	8001ace <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b1e      	subs	r3, #30
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4019      	ands	r1, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6898      	ldr	r0, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	3b1e      	subs	r3, #30
 8001ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	e019      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6919      	ldr	r1, [r3, #16]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	2207      	movs	r2, #7
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6898      	ldr	r0, [r3, #8]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d003      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d132      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_ADC_ConfigChannel+0x1e4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d125      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d126      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d11a      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	0c9a      	lsrs	r2, r3, #18
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x1b2>
 8001b66:	e007      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40012400 	.word	0x40012400
 8001b90:	20000004 	.word	0x20000004
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d12e      	bne.n	8001c10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc2:	f7ff fd05 	bl	80015d0 <HAL_GetTick>
 8001bc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bc8:	e01b      	b.n	8001c02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bca:	f7ff fd01 	bl	80015d0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d914      	bls.n	8001c02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10d      	bne.n	8001c02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e007      	b.n	8001c12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d0dc      	beq.n	8001bca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <__NVIC_SetPriorityGrouping>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4906      	ldr	r1, [pc, #24]	; (8001cc4 <__NVIC_EnableIRQ+0x34>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff90 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff2d 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff42 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff90 	bl	8001d1c <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5f 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff35 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e169      	b.n	8002130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8158 	bne.w	800212a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a9a      	ldr	r2, [pc, #616]	; (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4a98      	ldr	r2, [pc, #608]	; (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a98      	ldr	r2, [pc, #608]	; (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a96      	ldr	r2, [pc, #600]	; (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a96      	ldr	r2, [pc, #600]	; (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a94      	ldr	r2, [pc, #592]	; (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a92      	ldr	r2, [pc, #584]	; (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a92      	ldr	r2, [pc, #584]	; (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a79      	ldr	r2, [pc, #484]	; (80020fc <HAL_GPIO_Init+0x2b4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80b1 	beq.w	800212a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a48      	ldr	r2, [pc, #288]	; (8002104 <HAL_GPIO_Init+0x2bc>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a40      	ldr	r2, [pc, #256]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <HAL_GPIO_Init+0x2c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1e8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3e      	ldr	r2, [pc, #248]	; (8002110 <HAL_GPIO_Init+0x2c8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1e4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	; (8002114 <HAL_GPIO_Init+0x2cc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1e0>
 8002024:	2303      	movs	r3, #3
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002028:	2304      	movs	r3, #4
 800202a:	e004      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002034:	2300      	movs	r3, #0
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002046:	492f      	ldr	r1, [pc, #188]	; (8002104 <HAL_GPIO_Init+0x2bc>)
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	492c      	ldr	r1, [pc, #176]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	4928      	ldr	r1, [pc, #160]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4922      	ldr	r1, [pc, #136]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	491e      	ldr	r1, [pc, #120]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4918      	ldr	r1, [pc, #96]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4914      	ldr	r1, [pc, #80]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d021      	beq.n	800211c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e021      	b.n	800212a <HAL_GPIO_Init+0x2e2>
 80020e6:	bf00      	nop
 80020e8:	10320000 	.word	0x10320000
 80020ec:	10310000 	.word	0x10310000
 80020f0:	10220000 	.word	0x10220000
 80020f4:	10210000 	.word	0x10210000
 80020f8:	10120000 	.word	0x10120000
 80020fc:	10110000 	.word	0x10110000
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000
 8002114:	40011400 	.word	0x40011400
 8002118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_GPIO_Init+0x304>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	43db      	mvns	r3, r3
 8002124:	4909      	ldr	r1, [pc, #36]	; (800214c <HAL_GPIO_Init+0x304>)
 8002126:	4013      	ands	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f ae8e 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	372c      	adds	r7, #44	; 0x2c
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40010400 	.word	0x40010400

08002150 <LL_ADC_REG_SetSequencerLength>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <LL_ADC_IsEnabled>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80021a6:	4813      	ldr	r0, [pc, #76]	; (80021f4 <LL_ADC_CommonInit+0x5c>)
 80021a8:	f7ff ffe4 	bl	8002174 <LL_ADC_IsEnabled>
 80021ac:	4604      	mov	r4, r0
 80021ae:	4812      	ldr	r0, [pc, #72]	; (80021f8 <LL_ADC_CommonInit+0x60>)
 80021b0:	f7ff ffe0 	bl	8002174 <LL_ADC_IsEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4323      	orrs	r3, r4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d114      	bne.n	80021e6 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e008      	b.n	80021ea <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	e001      	b.n	80021ea <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	40012400 	.word	0x40012400
 80021f8:	40012800 	.word	0x40012800

080021fc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffb2 	bl	8002174 <LL_ADC_IsEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d112      	bne.n	800223c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	e001      	b.n	8002240 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff8b 	bl	8002174 <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d131      	bne.n	80022c8 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	430b      	orrs	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e008      	b.n	8002298 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80022a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6811      	ldr	r1, [r2, #0]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	4311      	orrs	r1, r2
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6912      	ldr	r2, [r2, #16]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff45 	bl	8002150 <LL_ADC_REG_SetSequencerLength>
 80022c6:	e001      	b.n	80022cc <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <LL_GPIO_SetPinMode>:
{
 80022d6:	b490      	push	{r4, r7}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0e1b      	lsrs	r3, r3, #24
 80022ea:	4413      	add	r3, r2
 80022ec:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	613b      	str	r3, [r7, #16]
  return result;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	210f      	movs	r1, #15
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	61bb      	str	r3, [r7, #24]
  return result;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	6023      	str	r3, [r4, #0]
}
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bc90      	pop	{r4, r7}
 8002338:	4770      	bx	lr

0800233a <LL_GPIO_SetPinSpeed>:
{
 800233a:	b490      	push	{r4, r7}
 800233c:	b088      	sub	sp, #32
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	4413      	add	r3, r2
 8002350:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	613b      	str	r3, [r7, #16]
  return result;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	2103      	movs	r1, #3
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	61bb      	str	r3, [r7, #24]
  return result;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	6023      	str	r3, [r4, #0]
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bc90      	pop	{r4, r7}
 800239c:	4770      	bx	lr

0800239e <LL_GPIO_SetPinOutputType>:
{
 800239e:	b490      	push	{r4, r7}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	0e1b      	lsrs	r3, r3, #24
 80023b2:	4413      	add	r3, r2
 80023b4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	613b      	str	r3, [r7, #16]
  return result;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	2104      	movs	r1, #4
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	61bb      	str	r3, [r7, #24]
  return result;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	6023      	str	r3, [r4, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc90      	pop	{r4, r7}
 8002400:	4770      	bx	lr

08002402 <LL_GPIO_SetPinPull>:
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	613b      	str	r3, [r7, #16]
  return result;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4619      	mov	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	408b      	lsls	r3, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	60da      	str	r2, [r3, #12]
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b088      	sub	sp, #32
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	60fb      	str	r3, [r7, #12]
  return result;
 8002466:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002470:	e044      	b.n	80024fc <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002472:	2201      	movs	r2, #1
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	409a      	lsls	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03a      	beq.n	80024f6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b07      	cmp	r3, #7
 8002484:	d806      	bhi.n	8002494 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002486:	f240 1201 	movw	r2, #257	; 0x101
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	e008      	b.n	80024a6 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3b08      	subs	r3, #8
 8002498:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a4:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d106      	bne.n	80024bc <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	461a      	mov	r2, r3
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa3 	bl	8002402 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	461a      	mov	r2, r3
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff06 	bl	80022d6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d003      	beq.n	80024da <LL_GPIO_Init+0x94>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	d10d      	bne.n	80024f6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	461a      	mov	r2, r3
 80024e0:	69b9      	ldr	r1, [r7, #24]
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff29 	bl	800233a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	461a      	mov	r2, r3
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff54 	bl	800239e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1b4      	bne.n	8002472 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <LL_I2C_Enable>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <LL_I2C_Disable>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 0201 	bic.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <LL_I2C_SetOwnAddress1>:
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	430a      	orrs	r2, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a41      	ldr	r2, [pc, #260]	; (800269c <LL_I2C_ConfigSpeed+0x120>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4939      	ldr	r1, [pc, #228]	; (80026a0 <LL_I2C_ConfigSpeed+0x124>)
 80025ba:	428b      	cmp	r3, r1
 80025bc:	d802      	bhi.n	80025c4 <LL_I2C_ConfigSpeed+0x48>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e009      	b.n	80025d8 <LL_I2C_ConfigSpeed+0x5c>
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4935      	ldr	r1, [pc, #212]	; (80026a4 <LL_I2C_ConfigSpeed+0x128>)
 80025d0:	fba1 1303 	umull	r1, r3, r1, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	431a      	orrs	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <LL_I2C_ConfigSpeed+0x124>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d939      	bls.n	800265a <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d117      	bne.n	800261c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	e01d      	b.n	8002652 <LL_I2C_ConfigSpeed+0xd6>
 8002616:	f248 0301 	movw	r3, #32769	; 0x8001
 800261a:	e01a      	b.n	8002652 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264c:	e001      	b.n	8002652 <LL_I2C_ConfigSpeed+0xd6>
 800264e:	f248 0301 	movw	r3, #32769	; 0x8001
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e011      	b.n	800267e <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	fbb2 f2f3 	udiv	r2, r2, r3
 8002664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002668:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	e000      	b.n	800267c <LL_I2C_ConfigSpeed+0x100>
 800267a:	2304      	movs	r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	61da      	str	r2, [r3, #28]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 021a 	bic.w	r2, r3, #26
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	601a      	str	r2, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff18 	bl	8002530 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f87b 	bl	8002800 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800270a:	6939      	ldr	r1, [r7, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff31 	bl	800257c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	461a      	mov	r2, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff12 	bl	800254e <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ffb9 	bl	80026a8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff feeb 	bl	8002512 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffc2 	bl	80026cc <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <LL_RCC_GetSysClkSource>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <LL_RCC_GetSysClkSource+0x14>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 030c 	and.w	r3, r3, #12
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000

0800276c <LL_RCC_GetAHBPrescaler>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <LL_RCC_GetAHBPrescaler+0x14>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000

08002784 <LL_RCC_GetAPB1Prescaler>:
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <LL_RCC_GetAPB1Prescaler+0x14>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000

0800279c <LL_RCC_GetAPB2Prescaler>:
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <LL_RCC_GetAPB2Prescaler+0x14>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000

080027b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <LL_RCC_PLL_GetMainSource+0x14>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40021000 	.word	0x40021000

080027cc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000

080027e4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <LL_RCC_PLL_GetPrediv+0x18>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c5b      	lsrs	r3, r3, #17
 80027ee:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002808:	f000 f820 	bl	800284c <RCC_GetSystemClockFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f83e 	bl	8002898 <RCC_GetHCLKClockFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f84c 	bl	80028c4 <RCC_GetPCLK1ClockFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f858 	bl	80028ec <RCC_GetPCLK2ClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002856:	f7ff ff7d 	bl	8002754 <LL_RCC_GetSysClkSource>
 800285a:	4603      	mov	r3, r0
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00c      	beq.n	800287a <RCC_GetSystemClockFreq+0x2e>
 8002860:	2b08      	cmp	r3, #8
 8002862:	d80e      	bhi.n	8002882 <RCC_GetSystemClockFreq+0x36>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <RCC_GetSystemClockFreq+0x22>
 8002868:	2b04      	cmp	r3, #4
 800286a:	d003      	beq.n	8002874 <RCC_GetSystemClockFreq+0x28>
 800286c:	e009      	b.n	8002882 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <RCC_GetSystemClockFreq+0x48>)
 8002870:	607b      	str	r3, [r7, #4]
      break;
 8002872:	e009      	b.n	8002888 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <RCC_GetSystemClockFreq+0x48>)
 8002876:	607b      	str	r3, [r7, #4]
      break;
 8002878:	e006      	b.n	8002888 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800287a:	f000 f84b 	bl	8002914 <RCC_PLL_GetFreqDomain_SYS>
 800287e:	6078      	str	r0, [r7, #4]
      break;
 8002880:	e002      	b.n	8002888 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <RCC_GetSystemClockFreq+0x48>)
 8002884:	607b      	str	r3, [r7, #4]
      break;
 8002886:	bf00      	nop
  }

  return frequency;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	007a1200 	.word	0x007a1200

08002898 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80028a0:	f7ff ff64 	bl	800276c <LL_RCC_GetAHBPrescaler>
 80028a4:	4603      	mov	r3, r0
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <RCC_GetHCLKClockFreq+0x28>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	40d3      	lsrs	r3, r2
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	08002be0 	.word	0x08002be0

080028c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80028cc:	f7ff ff5a 	bl	8002784 <LL_RCC_GetAPB1Prescaler>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <RCC_GetPCLK1ClockFreq+0x24>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	40d3      	lsrs	r3, r2
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	08002bf0 	.word	0x08002bf0

080028ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80028f4:	f7ff ff52 	bl	800279c <LL_RCC_GetAPB2Prescaler>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0adb      	lsrs	r3, r3, #11
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <RCC_GetPCLK2ClockFreq+0x24>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	461a      	mov	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	40d3      	lsrs	r3, r2
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	08002bf0 	.word	0x08002bf0

08002914 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002922:	f7ff ff47 	bl	80027b4 <LL_RCC_PLL_GetMainSource>
 8002926:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d003      	beq.n	800293e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002936:	e00b      	b.n	8002950 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800293a:	607b      	str	r3, [r7, #4]
      break;
 800293c:	e00b      	b.n	8002956 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800293e:	f7ff ff51 	bl	80027e4 <LL_RCC_PLL_GetPrediv>
 8002942:	4603      	mov	r3, r0
 8002944:	3301      	adds	r3, #1
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	607b      	str	r3, [r7, #4]
      break;
 800294e:	e002      	b.n	8002956 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002952:	607b      	str	r3, [r7, #4]
      break;
 8002954:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002956:	f7ff ff39 	bl	80027cc <LL_RCC_PLL_GetMultiplicator>
 800295a:	4603      	mov	r3, r0
 800295c:	0c9b      	lsrs	r3, r3, #18
 800295e:	3302      	adds	r3, #2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	003d0900 	.word	0x003d0900
 8002974:	007a1200 	.word	0x007a1200

08002978 <LL_USART_IsEnabled>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <LL_USART_SetStopBitsLength>:
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_USART_SetHWFlowCtrl>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	615a      	str	r2, [r3, #20]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <LL_USART_SetBaudRate>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	009a      	lsls	r2, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <LL_USART_SetBaudRate+0xb8>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	b299      	uxth	r1, r3
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009a      	lsls	r2, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <LL_USART_SetBaudRate+0xb8>)
 8002a2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	2064      	movs	r0, #100	; 0x64
 8002a34:	fb00 f303 	mul.w	r3, r0, r3
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	3332      	adds	r3, #50	; 0x32
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <LL_USART_SetBaudRate+0xb8>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	440b      	add	r3, r1
 8002a50:	b299      	uxth	r1, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <LL_USART_SetBaudRate+0xb8>)
 8002a68:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2064      	movs	r0, #100	; 0x64
 8002a70:	fb00 f303 	mul.w	r3, r0, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	3332      	adds	r3, #50	; 0x32
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <LL_USART_SetBaudRate+0xb8>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	51eb851f 	.word	0x51eb851f

08002aa4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff5e 	bl	8002978 <LL_USART_IsEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d145      	bne.n	8002b4e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002aca:	f023 030c 	bic.w	r3, r3, #12
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	6851      	ldr	r1, [r2, #4]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	6912      	ldr	r2, [r2, #16]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff57 	bl	800299e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff63 	bl	80029c2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002afc:	f107 0308 	add.w	r3, r7, #8
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe7d 	bl	8002800 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <LL_USART_Init+0xb4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d102      	bne.n	8002b14 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e00c      	b.n	8002b2e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <LL_USART_Init+0xb8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e005      	b.n	8002b2e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <LL_USART_Init+0xbc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002b44:	461a      	mov	r2, r3
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff4d 	bl	80029e8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	40004800 	.word	0x40004800

08002b64 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b6c:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <LL_SetSystemCoreClock+0x18>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000004 	.word	0x20000004

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	2600      	movs	r6, #0
 8002b84:	4d0c      	ldr	r5, [pc, #48]	; (8002bb8 <__libc_init_array+0x38>)
 8002b86:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	f000 f81a 	bl	8002bc8 <_init>
 8002b94:	2600      	movs	r6, #0
 8002b96:	4d0a      	ldr	r5, [pc, #40]	; (8002bc0 <__libc_init_array+0x40>)
 8002b98:	4c0a      	ldr	r4, [pc, #40]	; (8002bc4 <__libc_init_array+0x44>)
 8002b9a:	1b64      	subs	r4, r4, r5
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08002bf8 	.word	0x08002bf8
 8002bbc:	08002bf8 	.word	0x08002bf8
 8002bc0:	08002bf8 	.word	0x08002bf8
 8002bc4:	08002bfc 	.word	0x08002bfc

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
